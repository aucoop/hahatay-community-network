version: "3"

# More info at https://github.com/pi-hole/docker-pi-hole/ and https://docs.pi-hole.net/
services:
  pihole:
    container_name: pihole
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pihole.rule=Host(`pihole.server.hahatay`)"
      - "traefik.http.services.pihole.loadbalancer.server.port=80"
    image: pihole/pihole:latest
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      # - "67:67/udp" DHCP server is running in router, disabling
      - "8000:80/tcp"
    environment:
      TZ: 'Africa/Dakar'
      WEBPASSWORD: 'password'
      VIRTUAL_HOST: pihole.server.hahatay
    # Volumes store your data between container upgrades
    volumes:
      - './etc-pihole/:/etc/pihole/'
      - './etc-dnsmasq.d/:/etc/dnsmasq.d/'
    # Recommended but not required (DHCP needs NET_ADMIN)
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN
    dns:
      - 127.0.0.1
      - 1.1.1.1
    restart: unless-stopped

  nextcloud_db:
    container_name: nextcloud_db
    image: mariadb
    restart: unless-stopped
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW --innodb-file-per-table=1 --skip-innodb-read-only-compressed
    volumes:
      - /home/nextcloud/mysql:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_PASSWORD: password
      MYSQL_DATABASE: nextcloud
      MYSQL_USER: nextcloud

  nextcloud:
    container_name: nextcloud
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.rule=Host(`nextcloud.server.hahatay`)"
      - "traefik.http.services.nextcloud.loadbalancer.server.port=443"
      - "traefik.http.routers.nextcloud.entrypoints=websecure"
      - "traefik.http.routers.nextcloud.tls.certresolver=myresolver"
      - "traefik.http.services.nextcloud.loadbalancer.server.scheme=https"

    image: lscr.io/linuxserver/nextcloud
    restart: unless-stopped
    ports:
      - 8443:443

    links:
      - nextcloud_db
    volumes:
      - ./nextcloud/appdata:/config
      - ./nextcloud/data:/data
    environment:
      MYSQL_PASSWORD: password
      MYSQL_DATABASE: nextcloud
      MYSQL_USER: nextcloud
      MYSQL_HOST: nextcloud_db

  # TODO squid looks working, needs propper testing
  squid:
    container_name: squid
    image: sameersbn/squid:3.5.27-2
    ports:
      - 3128:3128
    volumes:
      - /srv/docker/squid/cache:/var/spool/squid
    restart: unless-stopped

  portainer:
    container_name: portainer
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.server.hahatay`)"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"

    image: portainer/portainer-ce
    ports:
      - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # TODO duckdns needs further testing/understanding
  duckdns:
    container_name: duckdns
    image: linuxserver/duckdns
    environment:
      - TZ=Africa/Dakar
      - SUBDOMAINS=hahatay.duckdns.org
      - TOKEN=7e2e1d7b-5408-4688-88cc-6902e05418ce
      - LOG_FILE=true
    volumes:
      - /docker/tools/duckdns:/config
    restart: always

  rocketchat:
    container_name: rocketchat
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rocketchat.rule=Host(`rocketchat.server.hahatay`)"
      - "traefik.http.services.rocketchat.loadbalancer.server.port=3000"
      - "traefik.http.routers.rocketchat.entrypoints=websecure"
      - "traefik.http.routers.rocketchat.tls.certresolver=myresolver"

    image: registry.rocket.chat/rocketchat/rocket.chat:latest
    command: >
      bash -c
        "for i in `seq 1 30`; do
          node main.js &&
          s=$$? && break || s=$$?;
          echo \"Tried $$i times. Waiting 5 secs...\";
          sleep 5;
        done; (exit $$s)"
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads
    environment:
      - PORT=3000
      - ROOT_URL=http://localhost:3000
      - MONGO_URL=mongodb://mongo:27017/rocketchat
      - MONGO_OPLOG_URL=mongodb://mongo:27017/local
      - REG_TOKEN=${REG_TOKEN}
    #       - MAIL_URL=smtp://smtp.email
    #       - HTTP_PROXY=http://proxy.domain.com
    #       - HTTPS_PROXY=http://proxy.domain.com
    depends_on:
      - mongo
    ports:
      - 3000:3000

  mongo:
    container_name: mongo
    image: mongo:4.0
    restart: unless-stopped
    volumes:
      - ./data/db:/data/db
      - ./data/dump:/dump
    command: mongod --smallfiles --oplogSize 128 --replSet rs0 --storageEngine=mmapv1
    labels:
      - "traefik.enable=false"

  # this container's job is just run the command to initialize the replica set.
  # it will run the command and remove himself (it will not stay running)
  mongo-init-replica:
    container_name: mongo-init-replica
    image: mongo:4.0
    command: >
      bash -c
        "for i in `seq 1 30`; do
          mongo mongo/rocketchat --eval \"
            rs.initiate({
              _id: 'rs0',
              members: [ { _id: 0, host: 'localhost:27017' } ]})\" &&
          s=$$? && break || s=$$?;
          echo \"Tried $$i times. Waiting 5 secs...\";
          sleep 5;
        done; (exit $$s)"
    depends_on:
      - mongo

  # TODO Reverse proxy seems to work.Needs testing and look for better practices.
  traefik:
    image: "traefik:v2.6"
    container_name: "traefik"
    command:
      - "--log.level=DEBUG"

      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=postmaster@example.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      # Disable SSL verification on backend
      # - "--serverstransport.insecureskipverify=true"
    ports:
      - "443:443"
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.server.hahatay`)"
      - "traefik.http.routers.api.service=api@internal"

  whoami:
    image: "traefik/whoami"
    container_name: "whaomi"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.server.hahatay`)"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.routers.whoami.tls.certresolver=myresolver"